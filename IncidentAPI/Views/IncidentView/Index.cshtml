<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Incident Dashboard</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        .incident-row:hover {
            background-color: #f8f9fa !important;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            transition: all 0.2s ease;
            cursor: pointer;
        }

        .incident-row.severity-high {
            border-left: 4px solid #dc3545;
        }

        .incident-row.severity-medium {
            border-left: 4px solid #ffc107;
        }

        .incident-row.severity-low {
            border-left: 4px solid #28a745;
        }

        .table-responsive {
            border-radius: 0.375rem;
            overflow: hidden;
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        }

        .card {
            transition: transform 0.2s ease;
        }

        .card:hover {
            transform: translateY(-2px);
        }

        .fade-in {
            animation: fadeIn 0.5s ease-in;
        }


        .loading-spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 20px auto;
        }


    </style>
</head>
<body>
    <div class="container-fluid py-4">
        <div class="row">
            <div class="col-12">
                <h1 class="mb-4">
                    <i class="fas fa-exclamation-triangle text-warning"></i>
                    Incident Dashboard
                </h1>

                <!-- Loading Spinner -->
                <div id="loadingSpinner" class="text-center" style="display: none;">
                    <div class="loading-spinner"></div>
                    <p>Loading incidents...</p>
                </div>

                <!-- Error Alert -->
                <div id="errorAlert" class="alert alert-danger alert-dismissible fade show" role="alert" style="display: none;">
                    <i class="fas fa-exclamation-circle"></i>
                    <strong>Error:</strong> <span id="errorMessage"></span>
                    <button type="button" class="btn-close" onclick="clearError()"></button>
                </div>

                <!-- Empty State -->
                <div id="emptyState" class="alert alert-info" style="display: none;">
                    <i class="fas fa-info-circle"></i>
                    No incidents found. The system is running smoothly!
                </div>

                <!-- Dashboard Content -->
                <div id="dashboardContent" style="display: none;">
                    <!-- Statistics Cards -->
                    <div class="row mb-4" id="statsCards">
                        <div class="col-md-3">
                            <div class="card text-center bg-light">
                                <div class="card-body">
                                    <h5 class="card-title" id="totalCount">0</h5>
                                    <p class="card-text">Total Incidents</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card text-center bg-danger text-white">
                                <div class="card-body">
                                    <h5 class="card-title" id="highCount">0</h5>
                                    <p class="card-text">High Severity</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card text-center bg-warning text-dark">
                                <div class="card-body">
                                    <h5 class="card-title" id="mediumCount">0</h5>
                                    <p class="card-text">Medium Severity</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card text-center bg-success text-white">
                                <div class="card-body">
                                    <h5 class="card-title" id="lowCount">0</h5>
                                    <p class="card-text">Low Severity</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Action Buttons -->
                    <div class="mb-3">
                        <button class="btn btn-primary me-2" onclick="refreshIncidents()">
                            <i class="fas fa-sync-alt"></i> Refresh
                        </button>
                        <button class="btn btn-outline-secondary" onclick="toggleAutoRefresh()" id="autoRefreshBtn">
                            <i class="fas fa-play"></i> Start Auto-Refresh
                        </button>
                        <button class="btn btn-success me-2" onclick="addSampleIncident()">
                            <i class="fas fa-plus"></i> Add Sample Incident
                        </button>
                    </div>

                    <!-- Incidents Table -->
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th>ID</th>
                                    <th>Title</th>
                                    <th>Description</th>
                                    <th>Severity</th>
                                    <th>Status</th>
                                    <th>Created</th>
                                    <th>Age</th>
                                </tr>
                            </thead>
                            <tbody id="incidentsTableBody">
                                <!-- Dynamic content will be inserted here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script>
        // Global variables
        let incidents = [];
        let autoRefreshInterval = null;
        let isAutoRefreshEnabled = false;

        // Sample data for demonstration
        const sampleIncidents = [
            {
                id: generateGuid(),
                title: "Server Outage in Production",
                description: "Main web server is not responding to requests",
                severity: "High",
                status: "Open",
                createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000) // 2 hours ago
            },
            {
                id: generateGuid(),
                title: "Database Connection Slow",
                description: "Users reporting slow page load times",
                severity: "Medium",
                status: "Open",
                createdAt: new Date(Date.now() - 30 * 60 * 1000) // 30 minutes ago
            },
            {
                id: generateGuid(),
                title: "Minor UI Bug in Login Form",
                description: "Submit button slightly misaligned on mobile",
                severity: "Low",
                status: "Open",
                createdAt: new Date(Date.now() - 10 * 60 * 1000) // 10 minutes ago
            }
        ];

        // Initialize the dashboard
        document.addEventListener('DOMContentLoaded', function() {
            loadIncidents();
        });

        // Load incidents (simulating API call)
        async function loadIncidents() {
            showLoading(true);
            hideError();

            try {
                // Simulate API delay
                await new Promise(resolve => setTimeout(resolve, 1000));

                // Try to fetch from API first, fallback to sample data
                try {
                    const response = await fetch('/api/incidents');
                    if (response.ok) {
                        const data = await response.json();
                        incidents = data.incidents || data || [];
                    } else {
                        // Fallback to sample data if API not available
                        incidents = [...sampleIncidents];
                    }
                } catch (apiError) {
                    // Use sample data if API call fails
                    incidents = [...sampleIncidents];
                    console.log('Using sample data - API not available');
                }

                renderIncidents();
                updateStatistics();
            } catch (error) {
                showError(`Failed to load incidents: ${error.message}`);
            } finally {
                showLoading(false);
            }
        }

        // Render incidents in the table
        function renderIncidents() {
            const tbody = document.getElementById('incidentsTableBody');
            tbody.innerHTML = '';

            if (incidents.length === 0) {
                document.getElementById('emptyState').style.display = 'block';
                document.getElementById('dashboardContent').style.display = 'none';
                return;
            }

            document.getElementById('emptyState').style.display = 'none';
            document.getElementById('dashboardContent').style.display = 'block';

            // Sort by creation date (newest first)
            const sortedIncidents = [...incidents].sort((a, b) => 
                new Date(b.createdAt) - new Date(a.createdAt)
            );

            sortedIncidents.forEach(incident => {
                const row = createIncidentRow(incident);
                tbody.appendChild(row);
            });
        }

        // Create a table row for an incident
        function createIncidentRow(incident) {
            const row = document.createElement('tr');
            row.className = `incident-row severity-${incident.severity.toLowerCase()} fade-in`;
            row.onclick = () => selectIncident(incident);

            const createdAt = new Date(incident.createdAt);
            const shortId = incident.id.toString().substring(0, 8);

            row.innerHTML = `
                <td><code class="small">${shortId}...</code></td>
                <td><strong>${escapeHtml(incident.title)}</strong></td>
                <td>
                    <span class="text-muted">
                        ${escapeHtml(truncateText(incident.description, 50))}
                    </span>
                </td>
                <td>
                    <span class="badge ${getSeverityBadgeClass(incident.severity)}">
                        <i class="${getSeverityIcon(incident.severity)}"></i>
                        ${incident.severity}
                    </span>
                </td>
                <td><span class="badge bg-secondary">${incident.status}</span></td>
                <td>
                    <small class="text-muted">
                        ${formatDateTime(createdAt)}
                    </small>
                </td>
                <td>
                    <small class="${getAgeClass(createdAt)}">
                        ${getIncidentAge(createdAt)}
                    </small>
                </td>
            `;

            return row;
        }

        // Update statistics cards
        function updateStatistics() {
            document.getElementById('totalCount').textContent = incidents.length;
            document.getElementById('highCount').textContent = 
                incidents.filter(i => i.severity === 'High').length;
            document.getElementById('mediumCount').textContent = 
                incidents.filter(i => i.severity === 'Medium').length;
            document.getElementById('lowCount').textContent = 
                incidents.filter(i => i.severity === 'Low').length;
        }

        // Handle incident selection
        function selectIncident(incident) {
            alert(`Selected incident: ${incident.title}`);
        }

        // Refresh incidents
        async function refreshIncidents() {
            await loadIncidents();
        }

        // Toggle auto-refresh
        function toggleAutoRefresh() {
            const btn = document.getElementById('autoRefreshBtn');
            
            if (isAutoRefreshEnabled) {
                clearInterval(autoRefreshInterval);
                isAutoRefreshEnabled = false;
                btn.innerHTML = '<i class="fas fa-play"></i> Start Auto-Refresh';
                btn.className = 'btn btn-outline-secondary';
            } else {
                autoRefreshInterval = setInterval(refreshIncidents, 30000); // 30 seconds
                isAutoRefreshEnabled = true;
                btn.innerHTML = '<i class="fas fa-pause"></i> Stop Auto-Refresh';
                btn.className = 'btn btn-outline-danger';
            }
        }

        // Add sample incident (for demo purposes)
        function addSampleIncident() {
            const severities = ['High', 'Medium', 'Low'];
            const titles = [
                'Network connectivity issue',
                'Application error',
                'Performance degradation',
                'Security alert',
                'System maintenance required'
            ];
            
            const newIncident = {
                id: generateGuid(),
                title: titles[Math.floor(Math.random() * titles.length)],
                description: 'Automatically generated sample incident for demonstration',
                severity: severities[Math.floor(Math.random() * severities.length)],
                status: 'Open',
                createdAt: new Date()
            };

            incidents.unshift(newIncident);
            renderIncidents();
            updateStatistics();
        }

        // Utility functions
        function showLoading(show) {
            document.getElementById('loadingSpinner').style.display = show ? 'block' : 'none';
        }

        function showError(message) {
            document.getElementById('errorMessage').textContent = message;
            document.getElementById('errorAlert').style.display = 'block';
        }

        function hideError() {
            document.getElementById('errorAlert').style.display = 'none';
        }

        function clearError() {
            hideError();
        }

        function getSeverityBadgeClass(severity) {
            const classes = {
                'High': 'bg-danger',
                'Medium': 'bg-warning text-dark',
                'Low': 'bg-success'
            };
            return classes[severity] || 'bg-secondary';
        }

        function getSeverityIcon(severity) {
            const icons = {
                'High': 'fas fa-fire',
                'Medium': 'fas fa-exclamation-triangle',
                'Low': 'fas fa-info-circle'
            };
            return icons[severity] || 'fas fa-question-circle';
        }

        function getAgeClass(createdAt) {
            const age = Date.now() - new Date(createdAt).getTime();
            const hours = age / (1000 * 60 * 60);
            
            if (hours < 1) return 'text-success';
            if (hours < 24) return 'text-warning';
            return 'text-danger';
        }

        function getIncidentAge(createdAt) {
            const age = Date.now() - new Date(createdAt).getTime();
            const minutes = Math.floor(age / (1000 * 60));
            const hours = Math.floor(age / (1000 * 60 * 60));
            const days = Math.floor(age / (1000 * 60 * 60 * 24));

            if (minutes < 60) return `${minutes}m ago`;
            if (hours < 24) return `${hours}h ago`;
            return `${days}d ago`;
        }

        function formatDateTime(date) {
            return date.toLocaleDateString('en-US', {
                month: 'short',
                day: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }

        function truncateText(text, maxLength) {
            if (text.length <= maxLength) return text;
            return text.substring(0, maxLength) + '...';
        }

        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        function generateGuid() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                const r = Math.random() * 16 | 0;
                const v = c === 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        }

        // Cleanup on page unload
        window.addEventListener('beforeunload', function() {
            if (autoRefreshInterval) {
                clearInterval(autoRefreshInterval);
            }
        });
    </script>
</body>
</html>